SET client_min_messages TO WARNING; -- Make this script a little more quiet
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS plpgsql_check;
CREATE EXTENSION IF NOT EXISTS pgtap;
DROP SCHEMA IF EXISTS app CASCADE;
DROP SCHEMA IF EXISTS trg CASCADE;
DROP SCHEMA IF EXISTS t CASCADE;
CREATE SCHEMA IF NOT EXISTS app;
CREATE SCHEMA IF NOT EXISTS trg;
CREATE SCHEMA IF NOT EXISTS t;

-------------------------------------------
-- Postgres Constraint Naming Convention --
-------------------------------------------
-- https://stackoverflow.com/a/4108266
-- The standard names for indexes in PostgreSQL are:
--
-- {tablename}_{columnname(s)}_{suffix}
--
-- where the suffix is one of the following:
-- • pkey for a Primary Key constraint
-- • key for a Unique constraint
-- • excl for an Exclusion constraint
-- • idx for any other kind of index
-- • fkey for a Foreign key
-- • check for a Check constraint
-- • seq for all sequences

-----------
-- Enums --
-----------

-- cohort
CREATE TABLE cohort_enum (cohort TEXT PRIMARY KEY, insertion_order INT GENERATED BY DEFAULT AS IDENTITY UNIQUE);
DO $$ DECLARE
    var_year INT := 2016;
    var_current_year INT := DATE_PART('year', CURRENT_DATE);
BEGIN
    INSERT INTO cohort_enum (cohort) VALUES ('');
    WHILE var_year <= var_current_year LOOP
        INSERT INTO cohort_enum (cohort) VALUES (var_year::TEXT);
        var_year := var_year + 1;
    END LOOP;
END $$;
SELECT * FROM cohort_enum;

-- stage
CREATE TABLE stage_enum (stage TEXT PRIMARY KEY);
INSERT INTO stage_enum (stage) VALUES (''), ('application'), ('submission'), ('evaluation'), ('feedback') RETURNING *;

-- milestone
CREATE TABLE milestone_enum (milestone TEXT PRIMARY KEY);
INSERT INTO milestone_enum (milestone) VALUES (''), ('milestone1'), ('milestone2'), ('milestone3') RETURNING *;

-- role
CREATE TABLE role_enum (role TEXT PRIMARY KEY);
INSERT INTO role_enum (role) VALUES (''), ('applicant'), ('student'), ('adviser'), ('mentor'), ('admin') RETURNING *;

-- project_level
CREATE TABLE project_level_enum (project_level TEXT PRIMARY KEY);
INSERT INTO project_level_enum (project_level) VALUES ('vostok'), ('gemini'), ('apollo'), ('artemis') RETURNING *;

-- project_category
CREATE TABLE project_category_enum (project_category TEXT PRIMARY KEY);
INSERT INTO
    project_category_enum (project_category)
VALUES
    ('Website')
    ,('iOS')
    ,('Android')
    ,('VR')
    ,('Game')
RETURNING *
;

-- applications status
CREATE TABLE applications_status_enum (status TEXT PRIMARY KEY);
INSERT INTO applications_status_enum (status) VALUES ('pending'), ('accepted'), ('deleted') RETURNING *;

-- teams status
CREATE TABLE teams_status_enum (status TEXT PRIMARY KEY);
INSERT INTO teams_status_enum (status) VALUES ('good'), ('ok'), ('uncontactable') RETURNING *;

-- mime type
CREATE TABLE mime_type_enum (type TEXT PRIMARY KEY);
INSERT INTO
    mime_type_enum (type)
VALUES
    -- We only need to store the most common MIME types we are planning to
    -- serve to the user. 'application/octet-stream' (i.e. binary data) will be
    -- the fallback MIME type for everything else.
    ('application/octet-stream')

    -- images
    ,('image/jpeg')
    ,('image/png')
    ,('image/gif')
    ,('image/svg+xml')
    ,('image/apng')
    ,('image/bmp')
    ,('image/x-icon')
    ,('image/tiff')
    ,('image/webp')
RETURNING *
;

-- Trigger function that updates the 'updated_at' column of a table
CREATE OR REPLACE FUNCTION trg.updated_at()
RETURNS TRIGGER AS $$ BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END $$ LANGUAGE plpgsql;

------------
-- Tables --
------------

CREATE TABLE users (
    uid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,displayname TEXT NOT NULL DEFAULT ''
    ,email TEXT NOT NULL UNIQUE
    ,password TEXT

    ,UNIQUE(displayname, email)
);

CREATE TABLE periods (
    pid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,cohort TEXT NOT NULL DEFAULT DATE_PART('year', CURRENT_DATE)::TEXT
    ,stage TEXT NOT NULL DEFAULT ''
    ,milestone TEXT NOT NULL DEFAULT ''
    ,start_at TIMESTAMPTZ
    ,end_at TIMESTAMPTZ
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (cohort, stage, milestone)
    ,FOREIGN KEY (cohort) REFERENCES cohort_enum (cohort) ON UPDATE CASCADE
    ,FOREIGN KEY (stage) REFERENCES stage_enum (stage) ON UPDATE CASCADE
    ,FOREIGN KEY (milestone) REFERENCES milestone_enum (milestone) ON UPDATE CASCADE
);
INSERT INTO periods (pid, cohort, stage, milestone) VALUES (0, '', '', ''); -- pseudo-null period (pid: 0) for foreign key purposes
COMMENT ON TABLE periods IS 'Periods are uniquely identified by their cohort, stage and milestone.';
CREATE TRIGGER periods_updated_at BEFORE UPDATE ON periods FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE form_schema (
    fsid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,period INT NOT NULL DEFAULT 0
    ,name TEXT NOT NULL DEFAULT ''
    ,subsection TEXT NOT NULL DEFAULT ''
    ,data JSONB
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (period, name, subsection)
    ,FOREIGN KEY (period) REFERENCES periods (pid) ON UPDATE CASCADE
);
INSERT INTO form_schema (fsid, period) VALUES (0, 0); -- pseudo-null form schema (fsid: 0) for foreign key purposes
COMMENT ON TABLE form_schema IS 'form_schema contains the skylab form questions.';
CREATE TRIGGER form_schema_updated_at BEFORE UPDATE ON form_schema FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE form_schema_roles (
    fsrid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,schema INT NOT NULL
    ,role TEXT NOT NULL

    ,UNIQUE(schema, role)
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
    ,FOREIGN KEY (role) REFERENCES role_enum (role) ON UPDATE CASCADE
);
COMMENT ON TABLE form_schema_roles IS 'form_schema_roles dictates which roles are authorized to answer which forms.';
CREATE TRIGGER form_schema_roles_updated_at BEFORE UPDATE ON form_schema_roles FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE user_roles (
    urid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,uid INT NOT NULL
    ,cohort TEXT NOT NULL DEFAULT DATE_PART('year', CURRENT_DATE)::TEXT
    ,role TEXT NOT NULL
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (uid, cohort, role)
    ,FOREIGN KEY (uid) REFERENCES users (uid) ON UPDATE CASCADE
    ,FOREIGN KEY (cohort) REFERENCES cohort_enum (cohort) ON UPDATE CASCADE
    ,FOREIGN KEY (role) REFERENCES role_enum (role) ON UPDATE CASCADE
);
COMMENT ON TABLE user_roles IS 'user_roles contain the roles each user has for a particular cohort.';
CREATE TRIGGER user_roles_updated_at BEFORE UPDATE ON user_roles FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE teams (
    tid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,project_level TEXT NOT NULL DEFAULT 'gemini'
    ,project_idea TEXT NOT NULL DEFAULT ''
    ,cohort TEXT NOT NULL DEFAULT DATE_PART('year', CURRENT_DATE)::TEXT
    ,status TEXT NOT NULL DEFAULT 'ok'
    ,team_name TEXT NOT NULL DEFAULT (EXTRACT(EPOCH FROM NOW())*1000)::BIGINT::TEXT
    ,mentor INT
    ,adviser INT
    ,data JSONB
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (cohort, team_name)
    ,FOREIGN KEY (mentor) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (adviser) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (cohort) REFERENCES cohort_enum (cohort) ON UPDATE CASCADE
    ,FOREIGN KEY (project_level) REFERENCES project_level_enum (project_level) ON UPDATE CASCADE
    ,FOREIGN KEY (status) REFERENCES teams_status_enum (status) ON UPDATE CASCADE
);
COMMENT ON TABLE teams IS 'teams contains the team information. To get the students of a team, check the user_roles_students table instead.';
CREATE TRIGGER teams_updated_at BEFORE UPDATE ON teams FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE applications (
    apnid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,team INT
    ,team_name TEXT
    ,cohort TEXT NOT NULL DEFAULT DATE_PART('year', CURRENT_DATE)::TEXT
    ,status TEXT NOT NULL DEFAULT 'pending'
    ,creator INT
    ,data JSONB
    ,schema INT NOT NULL
    ,project_level TEXT NOT NULL DEFAULT 'gemini'
    ,project_idea TEXT NOT NULL DEFAULT ''
    ,magicstring TEXT UNIQUE DEFAULT TRANSLATE(gen_random_uuid()::TEXT, '-', '')
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (cohort, team_name)
    ,FOREIGN KEY (team) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (creator) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
    ,FOREIGN KEY (cohort) REFERENCES cohort_enum (cohort) ON UPDATE CASCADE
    ,FOREIGN KEY (project_level) REFERENCES project_level_enum (project_level) ON UPDATE CASCADE
    ,FOREIGN KEY (status) REFERENCES applications_status_enum (status) ON UPDATE CASCADE
);
COMMENT ON TABLE applications IS 'applications contains the applications submitted by applicants. To get the applicants of an application, check the user_roles_applicants table instead.';
CREATE TRIGGER applications_updated_at BEFORE UPDATE ON applications FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE team_evaluate_team (
    evaluatee INT
    ,evaluator INT

    ,UNIQUE (evaluatee, evaluator)
    ,FOREIGN KEY (evaluator) REFERENCES teams (tid) ON UPDATE CASCADE ON DELETE CASCADE
    ,FOREIGN KEY (evaluatee) REFERENCES teams (tid) ON UPDATE CASCADE ON DELETE CASCADE
);
COMMENT ON TABLE team_evaluate_team IS 'team_evaluate_team dictates which team is supposed to evaluate which team.';

CREATE TABLE user_roles_applicants (
    urid INT PRIMARY KEY
    ,application INT
    ,data JSONB
    ,schema INT NOT NULL

    ,FOREIGN KEY (urid) REFERENCES user_roles (urid) ON UPDATE CASCADE ON DELETE CASCADE
    ,FOREIGN KEY (application) REFERENCES applications (apnid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) references form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE user_roles_applicants IS 'applicant-specific data';

CREATE TABLE user_roles_students (
    urid INT PRIMARY KEY
    ,team INT
    ,data JSONB

    ,FOREIGN KEY (urid) REFERENCES user_roles (urid) ON UPDATE CASCADE ON DELETE CASCADE
    ,FOREIGN KEY (team) REFERENCES  teams (tid) ON UPDATE CASCADE
);
COMMENT ON TABLE user_roles_students IS 'student-specific data';

CREATE TABLE team_submissions (
    tsid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,team INT NOT NULL
    ,data JSONB
    ,schema INT NOT NULL
    ,readme TEXT NOT NULL DEFAULT ''
    ,poster TEXT NOT NULL DEFAULT ''
    ,video TEXT NOT NULL DEFAULT ''
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (team, schema)
    ,FOREIGN KEY (team) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE team_submissions IS 'team_submissions contains the submissions of each team.';
CREATE TRIGGER team_submissions_updated_at BEFORE UPDATE ON team_submissions FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE team_submission_categories (
    tscid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,submission INT NOT NULL
    ,category TEXT NOT NULL

    ,UNIQUE(submission, category)
    ,FOREIGN KEY (submission) REFERENCES team_submissions (tsid) ON UPDATE CASCADE
    ,FOREIGN KEY (category) REFERENCES project_category_enum (project_category) ON UPDATE CASCADE
);
COMMENT ON TABLE team_submission_categories IS 'team_submission_categories contains the possible categories that each submission falls under.';

CREATE TABLE team_evaluate_submission (
    tesid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,evaluator INT NOT NULL
    ,evaluatee INT NOT NULL
    ,evaluation INT NOT NULL UNIQUE
    ,data JSONB
    ,schema INT NOT NULL
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE (evaluator, evaluatee)
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
    ,FOREIGN KEY (evaluator) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (evaluatee) REFERENCES team_submissions (tsid) ON UPDATE CASCADE
);
COMMENT ON TABLE team_evaluate_submission IS 'team_evaluate_submission contains teams'' evaluations of other team''s submissions.';
CREATE TRIGGER team_evaluate_submission_updated_at BEFORE UPDATE ON team_evaluate_submission FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE user_evaluate_submission (
    uesid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,evaluator INT NOT NULL
    ,evaluatee INT NOT NULL
    ,evaluation INT NOT NULL UNIQUE
    ,data JSONB
    ,schema INT NOT NULL
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE(evaluator, evaluatee)
    ,FOREIGN KEY (evaluator) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (evaluatee) REFERENCES team_submissions (tsid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE team_evaluate_submission IS 'user_evaluate_submission contains user evaluations of other team''s submissions.';
CREATE TRIGGER user_evaluate_submission_updated_at BEFORE UPDATE ON user_evaluate_submission FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE team_feedback_team (
    tftid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,evaluator INT NOT NULL
    ,evaluatee INT NOT NULL
    ,evaluation INT NOT NULL UNIQUE
    ,data JSONB
    ,schema INT NOT NULL
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE(evaluator, evaluatee)
    ,FOREIGN KEY (evaluator) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (evaluatee) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE team_feedback_team IS 'team_feedback_team contains the teams'' feedbacks for other teams.';
CREATE TRIGGER team_feedback_team_updated_at BEFORE UPDATE ON team_feedback_team FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE team_feedback_user (
    tfuid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,evaluator INT NOT NULL
    ,evaluatee INT NOT NULL
    ,evaluation INT NOT NULL UNIQUE
    ,data JSONB
    ,schema INT NOT NULL
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,UNIQUE(evaluator, evaluatee)
    ,FOREIGN KEY (evaluator) REFERENCES teams (tid) ON UPDATE CASCADE
    ,FOREIGN KEY (evaluatee) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE team_feedback_user IS 'team_feedback_user contains the teams'' feedbacks for other user roles.';
CREATE TRIGGER team_feedback_user_updated_at BEFORE UPDATE ON team_feedback_user FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE role_forms (
    rfid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    ,user_role INT NOT NULL
    ,data JSONB
    ,schema INT NOT NULL
    ,override_open BOOLEAN NOT NULL DEFAULT FALSE
    ,submitted BOOLEAN NOT NULL DEFAULT FALSE
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,FOREIGN KEY (user_role) REFERENCES user_roles (urid) ON UPDATE CASCADE
    ,FOREIGN KEY (schema) REFERENCES form_schema (fsid) ON UPDATE CASCADE
);
COMMENT ON TABLE role_forms IS 'role_forms contains any kind of form response submitted by a user role. Meant for ad-hoc forms created by the admin';
CREATE TRIGGER role_forms_updated_at BEFORE UPDATE ON role_forms FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();

CREATE TABLE sessions (
    hash TEXT PRIMARY KEY
    ,uid INT NOT NULL
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()

    ,FOREIGN KEY (uid) REFERENCES users (uid) ON UPDATE CASCADE
);
COMMENT ON TABLE sessions IS 'sessions contains the list of users currently logged in.';

CREATE TABLE media (
    uuid UUID NOT NULL DEFAULT gen_random_uuid()
    ,name TEXT NOT NULL DEFAULT ''
    ,type TEXT NOT NULL DEFAULT 'application/octet-stream'
    ,description TEXT NOT NULL DEFAULT ''
    ,data BYTEA NOT NULL
    ,created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    ,deleted_at TIMESTAMPTZ

    ,FOREIGN KEY (type) REFERENCES mime_type_enum (type) ON UPDATE CASCADE
);
COMMENT ON TABLE media IS 'Contains media (e.g. images) in the database for other tables to refer to.';
CREATE TRIGGER media_updated_at BEFORE UPDATE ON media FOR EACH ROW EXECUTE PROCEDURE trg.updated_at();
